<!DOCTYPE html>
<html>
<head lang="en">
<meta charset="utf-8"/>
	<title>学写一个字</title>
	<script src="http://libs.baidu.com/jquery/1.10.2/jquery.js">
	</script>
	<style type="text/css">
	    #canvas{
	display:block;
	margin:0 auto;
	
}
#controller{
	margin:0 auto;

}
.op_btn{
	float:right;
	margin:10px 0,0,10px;
	border:2px solid #aaa;
	width:80px;
	height:40px;
    line-height:40px;
    font-size:20px;
    text-align:center;
    border-radius:5px 5px;
    cursor:pointer;
    background-color:white;
    font-weight:bold;
    font-family:Microsoft Yahei,Arial;
    }
    .op_btn:hover{
    	background-color:#def;
    }
    .clearfix{
    	clear:both;
    }
    .color_btn{
    	float:left;
    	margin:10px 10px 0,0;
    	border:5px solid white;
    	width:40px;
    	height:40px;
    	border-radius:5px 5px;
    	cursor:pointer;
    }
    .color_btn.hover{
    	border:5px solid violet;

    }
    .color_btn_selected{
    	border:5px solid blueviolet;
    }
    #black_btn{
    	background-color:black;
    }
    #blue_btn{
    	background-color:blue;
    }
    #green_btn{
    	background-color:green;
    }
    #red_btn{
    	background-color:red;
    }
    #orange_btn{
    	background-color:orange;
    }
    #adf_btn{
    	background-color:#adf;
    }

	</style>
	<meta name="viewport"
	      content=" height = device-height,
	                width = device-width,
	                initial-scale = 1.0,
	                minimum-scale = 1.0,
	                maximum-scale = 1.0,
	                user-scalable = no"/>
</head>
<body>
<canvas id="canvas"></canvas>
<div id="controller">
    <div id="black_btn" class="color_btn color_btn_selected"></div>
    <div id="blue_btn" class="color_btn "></div>
    <div id="green_btn" class="color_btn "></div>
    <div id="red_btn" class="color_btn "></div>
    <div id="orange_btn" class="color_btn "></div>
    <div id="adf_btn" class="color_btn "></div>
    

	<div id="clear_btn" class="op_btn">清 除</div>
	<div class="clearfix"></div>
</div>
<script type="text/javascript">
	var canvasWidth = Math.min(600,$(window).width() - 20);

var canvasHeight = canvasWidth;

var strokeColor = "black";
var isMouseDown = false;
var lastLoc = {x:0,y:0};
var lastTimestamp = 0;
var lastlineWidth = -1;

var canvas = document.getElementById("canvas");
var context = canvas.getContext("2d");

canvas.width = canvasWidth;
canvas.height = canvasHeight;
$("#controller").css("width",canvasWidth +"px");

drawGrid();

$("#clear_btn").click(
	function(e){
		context.clearRect(0,0,canvasWidth,canvasHeight);
		drawGrid();

	})
$(".color_btn").click(
	function(e){
		$(".color_btn").removeClass("color_btn_selected");
		$(this).addClass("color_btn_selected");
		strokeColor = $(this).css("background-color");
	})

function beginStroke(point){
     isMouseDown = true;
     lastLoc =  windowToCanvas(point.x,point.y);
     lastTimestamp = new Date().getTime();
}

function endStroke(){
	isMouseDown = false;
}

function moveStorke(point){
	     var curLoc = windowToCanvas(point.x,point.y);
         var curTimestamp = new Date().getTime();
         var s = speed(curLoc,lastLoc);
         var t = curTimestamp - lastTimestamp;

         var lineWidth = calcLineWidth(t,s);


         context.beginPath();
         context.moveTo(lastLoc.x,lastLoc.y);
         context.lineTo(curLoc.x,curLoc.y);

         context.strokeStyle = strokeColor;
         context.lineWidth =lineWidth;
         context.lineCap = "round";
         context.lineJoin = "round";
         context.stroke();

         lastLoc = curLoc;
         lastTimestamp = curTimestamp;
         lastlineWidth = lineWidth;

}
canvas.onmousedown = function(e){
     e.preventDefault();
     beginStroke({x:e.clientX,y:e.clientY})
    // isMouseDown = true;
    //console.log("mouse down");
    //lastLoc = windowToCanvas(e.clientX,e.clientY);
    //lastTimestamp = new Date().getTime();
    
};
canvas.onmouseup = function(e){
     e.preventDefault();
     //isMouseDown = false;
     endStroke();
     //console.log("mouse up");
 };
canvas.onmouseout = function(e){
     e.preventDefault();
     endStroke();
     //isMouseDown = false;
     //console.log("mouse out");
};
canvas.onmousemove = function(e){
     e.preventDefault();
     if(isMouseDown){
     	moveStorke({x:e.clientX,y:e.clientY})
         //console.log("mouse move");
        /* var curLoc = windowToCanvas(e.clientX,e.clientY);
         var curTimestamp = new Date().getTime();
         var s = speed(curLoc,lastLoc);
         var t = curTimestamp - lastTimestamp;

         var lineWidth = calcLineWidth(t,s);


         context.beginPath();
         context.moveTo(lastLoc.x,lastLoc.y);
         context.lineTo(curLoc.x,curLoc.y);

         context.strokeStyle = strokeColor;
         context.lineWidth =lineWidth;
         context.lineCap = "round";
         context.lineJoin = "round";
         context.stroke();

         lastLoc = curLoc;
         lastTimestamp = curTimestamp;
         lastlineWidth = lineWidth;
         */
     } 

};


canvas.addEventListener('touchstart',function(e){
	e.preventDefault();
	touch = e.touches[0];
	beginStroke( {x:touch.pageX,y:touch.pageY} );
});
canvas.addEventListener('touchmove',function(e){
	e.preventDefault();
	if(isMouseDown){
		touch = e.touches[0];
	    moveStorke( {x:touch.pageX , y:touch.pageY} )
	}
});
canvas.addEventListener('touchend',function(e){
	e.preventDefault();
	endStroke();
});


var maxlinewidth = 20;
var minlinewidth = 1;
var maxstorev = 8;
var minstorev = 0.1;
function calcLineWidth(t,s){
	var v = s/t;
	var resultLineWidth;
	if(v <= minstorev)
		resultLineWidth = maxlinewidth;
	else if(v >= maxstorev)
		resultLineWidth = minlinewidth;
	else
		resultLineWidth = maxlinewidth - (v - minstorev)/(maxstorev - minstorev) *(maxlinewidth -minlinewidth);
	if(lastlineWidth == -1){
		return resultLineWidth;
	}
	return lastlineWidth*2/3 +  resultLineWidth*1/3;
} 

function speed(loc1,loc2){
	return Math.sqrt((loc1.x - loc2.x)*(loc1.x - loc2.x) + (loc1.y - loc2.y)*(loc1.y - loc2.y));
}

function windowToCanvas(x,y){
	var bbox = canvas.getBoundingClientRect();
	return {x:Math.round(x-bbox.left),y:Math.round(y-bbox.top)}
}
function drawGrid(){
	context.strokeStyle = "rgb(230,11,9)";


context.save();
context.beginPath();
context.moveTo(3,3);
context.lineTo(canvasWidth - 3,3);
context.lineTo(canvasWidth - 3,canvasHeight - 3);
context.lineTo(3,canvasHeight - 3);
context.closePath();

context.lineWidth = 6;
context.stroke();

context.beginPath();
context.moveTo(0,0);
context.lineTo(canvasWidth,canvasHeight);

context.moveTo(canvasWidth,0);
context.lineTo(0,canvasHeight);

context.moveTo(canvasWidth/2,0);
context.lineTo(canvasWidth/2,canvasHeight);

context.moveTo(0,canvasHeight/2);
context.lineTo(canvasWidth,canvasHeight/2);

context.lineWidth = 1;
context.stroke();

context.restore();
}

</script>

</body>
</html>



